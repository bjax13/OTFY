{"version":3,"sources":["app.js","test.js","controllers/addressInputCtrl.js","controllers/mainCtrl.js","controllers/navBarCtrl.js","directives/navDirective.js","services/addressAutoFillSrvc.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","url","templateUrl","controller","placeSearch","autocomplete","componentForm","street_number","route","locality","administrative_area_level_1","country","postal_code","initialize","google","maps","places","Autocomplete","document","getElementById","types","event","addListener","fillInAddress","place","getPlace","component","value","disabled","i","address_components","length","addressType","val","geolocate","navigator","geolocation","getCurrentPosition","position","LatLng","coords","latitude","longitude","circle","Circle","center","radius","accuracy","setBounds","getBounds","$scope","addressAutoFillSrvc","test","loggedIn","changeLoggin","console","log","directive","restrict","scope","service"],"mappings":"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","file":"bundle.js","sourcesContent":["angular.module('app',['ui.router'])\n .config(function ($stateProvider, $urlRouterProvider) {\n\n   $urlRouterProvider.otherwise('/');\n\n\n   $stateProvider\n      .state('landingPage', {\n        url: '/',\n        templateUrl: './views/landingPage.html'\n      })\n      .state('main', {\n        url: '/main',\n        templateUrl: './views/main.html'\n      })\n      .state('login', {\n        url: '/login',\n        templateUrl: './views/login.html',\n        controller: 'navBarCtrl'\n      })\n      .state('orderCL', {\n        url: '/orderCL',\n        templateUrl: './views/orderCL.html'\n      })\n      .state('orderCL.address', {\n        url: '/address',\n        templateUrl: './views/orderClSub/address.html',\n        controller: 'addressInputCtrl'\n      })\n      .state('orderCL.selectBrand', {\n        url: '/selectBrand',\n        templateUrl: './views/orderClSub/selectBrand.html'\n      })\n      .state('orderCL.selectECP', {\n        url: '/selectECP',\n        templateUrl: './views/orderClSub/selectECP.html'\n      })\n      .state('orderCL.checkout', {\n        url: '/checkout',\n        templateUrl: './views/orderClSub/checkout.html'\n      })\n      .state('scheduleEyeExamComingSoon', {\n        url: '/scheduleEyeExamComingSoon',\n        templateUrl: './views/scheduleEyeExamComingSoon.html'\n      })\n      .state('orderEWComingSoon', {\n        url: '/orderEWComingSoon',\n        templateUrl: './views/orderEWComingSoon.html'\n      })\n      .state('userInfo', {\n        url: '/userInfo',\n        templateUrl: './views/userInfo.html'\n      });\n\n });\n","// This example displays an address form, using the autocomplete feature\n// of the Google Places API to help users fill in the information.\n\nvar placeSearch, autocomplete;\nvar componentForm = {\n  street_number: 'short_name',\n  route: 'long_name',\n  locality: 'long_name',\n  administrative_area_level_1: 'short_name',\n  country: 'long_name',\n  postal_code: 'short_name'\n};\n\nfunction initialize() {\n  // Create the autocomplete object, restricting the search\n  // to geographical location types.\n  autocomplete = new google.maps.places.Autocomplete(\n      /** @type {HTMLInputElement} */(document.getElementById('autocomplete')),\n      { types: ['geocode'] });\n  // When the user selects an address from the dropdown,\n  // populate the address fields in the form.\n  google.maps.event.addListener(autocomplete, 'place_changed', function() {\n    fillInAddress();\n  });\n}\n\n// [START region_fillform]\nfunction fillInAddress() {\n  // Get the place details from the autocomplete object.\n  var place = autocomplete.getPlace();\n\n  for (var component in componentForm) {\n    document.getElementById(component).value = '';\n    document.getElementById(component).disabled = false;\n  }\n\n  // Get each component of the address from the place details\n  // and fill the corresponding field on the form.\n  for (var i = 0; i < place.address_components.length; i++) {\n    var addressType = place.address_components[i].types[0];\n    if (componentForm[addressType]) {\n      var val = place.address_components[i][componentForm[addressType]];\n      document.getElementById(addressType).value = val;\n    }\n  }\n}\n// [END region_fillform]\n\n// [START region_geolocation]\n// Bias the autocomplete object to the user's geographical location,\n// as supplied by the browser's 'navigator.geolocation' object.\nfunction geolocate() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(function(position) {\n      var geolocation = new google.maps.LatLng(\n          position.coords.latitude, position.coords.longitude);\n      var circle = new google.maps.Circle({\n        center: geolocation,\n        radius: position.coords.accuracy\n      });\n      autocomplete.setBounds(circle.getBounds());\n    });\n  }\n}\n// [END region_geolocation]\n","angular.module('app')\n  .controller('addressInputCtrl', function ($scope,addressAutoFillSrvc) {\n    $scope.test = addressAutoFillSrvc.test;\n\n\n    $scope.initialize = addressAutoFillSrvc.initialize;\n\n    $scope.geolocate = addressAutoFillSrvc.geolocate;\n\n  });\n","angular.module('app')\n  .controller('mainCtrl', function ($scope) {\n\n$scope.test = 'again';\n  });\n","angular.module('app')\n  .controller('navBarCtrl', function ($scope) {\n    $scope.loggedIn = false;\n\n    $scope.changeLoggin = function () {\n\n\n      $scope.loggedIn = !$scope.loggedIn;\n      console.log($scope.loggedIn);\n    };\n\n  });\n","angular.module('app')\n  .directive('navBar', function () {\n    return {\n      restrict: 'E',\n      templateUrl: \"./js/directives/templates/navTpl.html\",\n      scope: {\n      },\n      controller: 'navBarCtrl'\n    };\n  });\n","angular.module('app')\n  .service('addressAutoFillSrvc', function () {\n\n    this.test = 'svc bacon';\n\n    let placeSearch, autocomplete;\n    let componentForm = {\n      street_number: 'short_name',\n      route: 'long_name',\n      locality: 'long_name',\n      administrative_area_level_1: 'short_name',\n      country: 'long_name',\n      postal_code: 'short_name'\n    };\n\n    this.initialize = function() {\n      // Create the autocomplete object, restricting the search\n      // to geographical location types.\n      autocomplete = new google.maps.places.Autocomplete(\n          /** @type {HTMLInputElement} */(document.getElementById('autocomplete')),\n          { types: ['geocode'] });\n      // When the user selects an address from the dropdown,\n      // populate the address fields in the form.\n      google.maps.event.addListener(autocomplete, 'place_changed', function() {\n        fillInAddress();\n      });\n    };\n\n    function fillInAddress() {\n      // Get the place details from the autocomplete object.\n      var place = autocomplete.getPlace();\n\n      for (var component in componentForm) {\n        document.getElementById(component).value = '';\n        document.getElementById(component).disabled = false;\n      }\n\n      // Get each component of the address from the place details\n      // and fill the corresponding field on the form.\n      for (var i = 0; i < place.address_components.length; i++) {\n        var addressType = place.address_components[i].types[0];\n        if (componentForm[addressType]) {\n          var val = place.address_components[i][componentForm[addressType]];\n          document.getElementById(addressType).value = val;\n        }\n      }\n    }\n    // [END region_fillform]\n\n    // [START region_geolocation]\n    // Bias the autocomplete object to the user's geographical location,\n    // as supplied by the browser's 'navigator.geolocation' object.\n    this.geolocate = function() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function(position) {\n          var geolocation = new google.maps.LatLng(\n              position.coords.latitude, position.coords.longitude);\n          var circle = new google.maps.Circle({\n            center: geolocation,\n            radius: position.coords.accuracy\n          });\n          autocomplete.setBounds(circle.getBounds());\n        });\n      }\n    };\n    // [END region_geolocation]\n\n\n\n\n  });\n"]}